@using LOBP.Models
@model ApplicationFormModel


@{
    ViewBag.Title = "LicenseToOperate";
    Layout = "~/Views/Shared/_CompanyLayout.cshtml";
}

<div class="row">
    <div class="pageTitle bg1">
        <h3 class="lefty">@ViewBag.LicenseName</h3>
        <div class="clear"></div>
    </div>
</div>

<div class="padd-t form-horizontal">

    @using (Html.BeginForm("CategoryLicense", "Company", FormMethod.Post, new { id = "formid", role = "form", @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.LicenseTypeId)
        @Html.HiddenFor(model => model.ApplicationId)

        <div class="row">

            @if (ViewBag.ErrorMessage == "SUCCESS")
            {

                <div class="row form-group">
                    <label class="control-label col-md-2" for="@Model.ApplicationType">Application Type</label>
                    <div class="col-md-4">
                        @Html.DropDownList("ApplicationType", null, new { @class = "form-control select2", required = "required", id = "ApplicationType", onchange = "ControlRenewLicense(this.value);" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.ApplicationType" data-valmsg-replace="true"></span>
                    </div>

                    <div id="LicenseToRenewFieldId">
                        <label class="control-label col-md-2" for="@Model.LicenseToRenew">Select License To Renew</label>
                        <div class="col-md-4">
                            @Html.DropDownList("LicenseToRenew", null, new { @class = "form-control select2", id = "LicenseToRenew", onchange = "populateLicenseDetails(this.value);" })
                            <span class="text-danger field-validation-valid" data-valmsg-for="@Model.LicenseToRenew" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>


                <div class="row form-group">
                    <label class="control-label col-md-2" for="@Model.NameOfCompany">Name Of Company</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.NameOfCompany, new { @class = "form-control", required = "required", @readonly = "readonly" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.NameOfCompany" data-valmsg-replace="true"></span>
                    </div>
                    <label class="control-label col-md-2" for="@Model.RegisteredAddress">Registered Address</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.RegisteredAddress, new { @class = "form-control", @readonly = "readonly" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.RegisteredAddress" data-valmsg-replace="true"></span>
                    </div>
                </div>
                
                <div class="row form-group">       
                    <label class="control-label col-md-2" for="@Model.LocationAddress">Operational Address</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.LocationAddress, new { @class = "form-control", required = "required" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.LocationAddress" data-valmsg-replace="true"></span>
                    </div>
                    <label class="control-label col-md-2" for="@Model.GPS">GPS Cordinates</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.GPS, new { @class = "form-control", required = "required", @readonly = "readonly" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.GPS" data-valmsg-replace="true"></span>
                    </div>
                </div>


                <div class="row form-group">
                    <label class="control-label col-md-2" for="@Model.State">State </label>
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.State, null, new { @class = "form-control select2", required = "required", onchange = "getLga(this.value);" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.State" data-valmsg-replace="true"></span>
                    </div>

                    <label class="control-label col-md-2" for="@Model.LGA">LGA </label>
                    <div class="col-md-4">
                        @Html.DropDownList("LGA", null, new { @class = "form-control select2", required = "required", id = "LGA" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.LGA" data-valmsg-replace="true"></span>
                    </div>
                </div>


                <div class="row form-group">
                    <label class="control-label col-md-2">Storage Type </label>
                    <div class="col-md-4">
                        @Html.DropDownList("StorageType", null, new { @class = "form-control select2", required = "required", multiple = "multiple" })
                    </div>
                    <label class="control-label  col-md-2" for="@Model.Capacity">Total Capacity (Kg) </label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.Capacity, new { @class = "form-control", required = "required", type = "number" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.Capacity" data-valmsg-replace="true"></span>
                    </div>
                </div>


                <div class="row form-group">
                    <label class="control-label col-md-2" for="@Model.SponsorCompanyDetail">Lpg Gas Plant Sponsor Details</label>
                    <div class="col-md-4">
                        @Html.TextAreaFor(model => model.SponsorCompanyDetail, new { @class = "form-control", required = "required", rows = "4" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.SponsorCompanyDetail" data-valmsg-replace="true"></span>
                    </div>

                    <label class="control-label col-md-2" for="@Model.AdditionalInfo">Additional Information</label>
                    <div class="col-md-4">
                        @Html.TextAreaFor(model => model.ManagementAgreemnt, new { @class = "form-control", required = "required", rows = "4" })
                        <span class="text-danger field-validation-valid" data-valmsg-for="@Model.ManagementAgreemnt" data-valmsg-replace="true"></span>
                    </div>
                </div>
                

                <br/>
                <div class="form-group">
                    <div class="col-xs-12 col-sm-4 col-sm-offset-6">
                        <button type="submit" class="btn btn-primary btn-default round" id="addbtn">Submit and Continue</button>
                    </div>
                </div>

            }
            else
            {
                <div class="col-md-12">
                    <div class="alert alert-danger alert-dismissible center-block" role="alert" id="welcomealert" align="center">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <i class="fa fa-exclamation-triangle fa-2x fa-border fa-spin " aria-hidden="true"></i>
                        <strong>@MvcHtmlString.Create(ViewBag.ErrorMessage)</strong>
                    </div>
                </div>
            }


        </div>
    }
</div>

<div id="modalMapDialog" style="display: none">
    <div id="MapContainer" style="height: 430px; width: 100%;border: 5px solid green;"></div>
</div>


@section scripts{
    <script src="@Url.Content("~/Scripts/jquery.ui.widget.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.iframe-transport.js")" type="text/javascript"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC2df9i_A809q2eQQizBb7UqSGXASsQHVQ&libraries=places"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/jquery-ui.css")" rel="stylesheet" />

<script type="text/javascript">
    $(document).ready(function () {
        $('#StorageType').select2();
    });
    </script>

    <script type="text/javascript">
        function getContextPath() {
            return window.location.pathname.substring(0, window.location.pathname.indexOf("/", 2));
        }
   </script>


    <script type="text/javascript">
        google.maps.event.addDomListener(window, 'load', function () {
            var options = {
                componentRestrictions: { country: "ng" }
            };
            var places = new google.maps.places.Autocomplete(document.getElementById('LocationAddress'), options);
            google.maps.event.addListener(places, 'place_changed', function () {
                var place = places.getPlace();
                var address = place.formatted_address;
                var latitude = place.geometry.location.lat();
                var longitude = place.geometry.location.lng();
                var mesg = "Location Address Is : " + address;
                mesg += "\nLocation Latitude Is : " + latitude;
                mesg += "\nLocation Longitude Is: " + longitude;
                showMap(address, latitude, longitude);
            });
        });
    </script>

    <script type="text/javascript">
        function showMap(locationaddress, latitude, longitude) {
            var markers = [];

            $("#modalMapDialog").dialog({
                modal: true,
                title: "Address Location on Map",
                width: 550,
                hright: 400,
                buttons: {
                    Close: function () {
                        $(this).dialog('close');
                    },
                    Okay: function () {
                        //$('#secondDiv').show();
                        $("#GPS").val(latitude + ',' + longitude);
                        $(this).dialog('close');
                    }
                },
                open: function () {

                    google.maps.visualRefresh = true;
                    var myCenter = new google.maps.LatLng(latitude, longitude);
                    var mapCanvas = document.getElementById("MapContainer");
                    var mapOptions = {
                        center: myCenter,
                        zoom: 14,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        panControl: true,
                        zoomControl: true,
                        mapTypeControl: true,
                        scaleControl: true,
                        streetViewControl: true,
                        overviewMapControl: true,
                        rotateControl: true,
                        zoomControl: true,
                        zoomControlOptions: {
                            style: google.maps.ZoomControlStyle.SMALL
                        },
                        mapTypeControl: true,
                        mapTypeControlOptions: {
                            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
                            position: google.maps.ControlPosition.TOP_CENTER,
                            mapTypeIds: [
                    google.maps.MapTypeId.ROADMAP,
                    google.maps.MapTypeId.TERRAIN,
                    google.maps.MapTypeId.SATELLITE,
                    google.maps.MapTypeId.HYBRID
                            ]
                        }
                    };

                    var map = new google.maps.Map(mapCanvas, mapOptions);
                    var marker = new google.maps.Marker({ position: myCenter, animation: google.maps.Animation.BOUNCE });
                    marker.setMap(map);

                    var infowindow = new google.maps.InfoWindow({
                        content: locationaddress
                    });
                    infowindow.open(map, marker);

                    // Zoom to 9 when clicking on marker
                    google.maps.event.addListener(marker, 'click', function () {
                        map.setZoom(13);
                        map.setCenter(marker.getPosition());
                    });
                }
            });
        }
    </script>


    <script type="text/javascript">
        $(document).ready(function () {
            //$('#LicenseToRenewFieldId').hide();
            $('#addbtn').click(function (e) {
                e.preventDefault();
                if ($("#formid").valid()) {

                    var r = confirm("So you want to Proceed ?");
                    if (r == true) {
                        $.post($("#formid").attr('action'), $("#formid").serialize())
                               .done(function (data) {
                                   var status = data.Status;
                                   if (status != 'success') {
                                       alert(status);
                                   }
                                   else {

                                       $.notify({
                                           icon: 'fa fa-book',
                                           message: '<strong>Application Reference ' + data.applicationId + ' Created For this Application</strong>'
                                       }, {
                                           delay: 4000,
                                           type: 'info',
                                           animate: {
                                               enter: 'animated zoomInDown',
                                               exit: 'animated zoomOutUp'
                                           }
                                       });

                                       window.location.href = getContextPath() + "/DocumentUpload?ApplicationId=" + data.applicationId;
                                   }

                               })
                              .fail(function (data) {
                                  alert('Network Communication Error, Restore Connection and Try again');
                              })
                             .always(function (data) {
                             });
                    }
                }
            });
        });
    </script>

    <script type="text/javascript">
        function getLga(stateCode) {
            var strMethodUrl = '@Url.Action("GetLga")' + '?stateCode=' + stateCode;
            $.getJSON(strMethodUrl, function (data) {
                if (data != null) {

                    $("#LGA").html("");
                    $("#GPS").val("");

                    for (var i = 0; i < data.length; i++) {
                        $("#LGA").append('<option value="' + data[i].lga_code + '">' + data[i].lga_name + '</option>');
                        $("#GPS").val(data[i].latitude + ',' + data[i].longitude);
                    }
                }
            }).fail(function (jqxhr, textStatus, error) { alert("fail =>> " + textStatus + ", " + error); });
        }


        function ControlRenewLicense(appType) {

            if (appType == "NEW") {
                $('#LicenseToRenewFieldId').hide();
            }
            else {
                $('#LicenseToRenewFieldId').show();

                var strMethodUrl = '@Url.Action("GetLicenseToRenew")' + '?LicenseType=' + '@Model.LicenseTypeId';
                $.getJSON(strMethodUrl, function (data) {
                    if (data != null) {
                        $("#LicenseToRenew").html("");

                        for (var i = 0; i < data.length; i++) {
                            $("#LicenseToRenew").append('<option value="' + data[i] + '">' + data[i] + '</option>');
                        }
                    }
                }).fail(function (jqxhr, textStatus, error) { alert("fail =>> " + textStatus + ", " + error); });
            }
        }

        function populateLicenseDetails(licenseReference) {

        }
    </script>
}
